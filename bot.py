import random
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes
)

# –ò—Å—Ç–æ—á–Ω–∏–∫ 1: meme-api.com
def get_meme_api():
    r = requests.get("https://meme-api.com/gimme")
    data = r.json()
    return {"url": data["url"], "title": data["title"]}

# –ò—Å—Ç–æ—á–Ω–∏–∫ 2: imgflip (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞)
def get_imgflip():
    r = requests.get("https://api.imgflip.com/get_memes")
    data = r.json()
    meme = random.choice(data["data"]["memes"])
    return {"url": meme["url"], "title": meme["name"]}

# –ò—Å—Ç–æ—á–Ω–∏–∫ 3: memezz.com
def get_memezz():
    r = requests.get("https://memezz.com/api/v1/meme/random")
    data = r.json()
    return {"url": data["meme"]["url"], "title": data["meme"]["title"]}

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
MEME_SOURCES = [get_meme_api, get_imgflip, get_memezz]

# –ö–Ω–æ–ø–∫–∞
def get_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÅ –ï—â—ë –º–µ–º", callback_data="more_meme")]
    ])

# –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–º–∞
async def send_meme(update_or_query, context: ContextTypes.DEFAULT_TYPE):
    meme_func = random.choice(MEME_SOURCES)
    try:
        meme = meme_func()
        if isinstance(update_or_query, Update):
            await update_or_query.message.reply_photo(
                photo=meme["url"],
                caption=meme["title"],
                reply_markup=get_keyboard()
            )
        else:
            await update_or_query.message.edit_media(
                media=InputMediaPhoto(media=meme["url"], caption=meme["title"]),
                reply_markup=get_keyboard()
            )
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–º–∞:", e)
        if isinstance(update_or_query, Update):
            await update_or_query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ–º üò¢")
        else:
            await update_or_query.message.edit_message_text("–ú–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ üôÅ")

# –ö–æ–º–∞–Ω–¥–∞ /meme
async def meme_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_meme(update, context)

# –ö–Ω–æ–ø–∫–∞ "–µ—â—ë –º–µ–º"
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "more_meme":
        await send_meme(query, context)

# === –ó–∞–ø—É—Å–∫ ===
TOKEN = "8135269098:AAEiL99eCR9bo9K3sqqeQea2pgcFeSAuEjI"

app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("meme", meme_command))
app.add_handler(CallbackQueryHandler(button_callback))
app.run_polling()
